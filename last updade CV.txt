import cv2
import numpy as np
from pyfirmata import Arduino, util
import pyfirmata
import time
import serial

board = pyfirmata.Arduino('COM5')  # Update with correct port
it = pyfirmata.util.Iterator(board)
it.start()

# Define analog input pin
green_pin = board.get_pin('d:9:o')
yellow_pin = board.get_pin('d:6:o')

# Define motor pins
motor_pin_1 = board.get_pin('d:4:o')  # Motor pin 1
motor_pin_2 = board.get_pin('d:5:o')  # Motor pin 2
motor_pin_3 = board.get_pin('d:3:o')  # Motor pin 3
motor_pin_4 = board.get_pin('d:8:o')  # Motor pin 4

frameWidth = 640
frameHeight = 480
cap = cv2.VideoCapture(1)
cap.set(3, frameWidth)
cap.set(4, frameHeight)

def empty(a):
    pass

cv2.namedWindow("Parameters")
cv2.resizeWindow("Parameters",640,240)
cv2.createTrackbar("Threshold1","Parameters",23,255,empty)
cv2.createTrackbar("Threshold2","Parameters",20,255,empty)
cv2.createTrackbar("Area","Parameters",5000,30000,empty)


def stackImages(scale,imgArray, cx, cy):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range ( 0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)
                imgArray[x][y] = cv2.circle(imgArray[x][y], (cx, cy), 7, (255, 0, 0), -1)

        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor= np.hstack(imgArray)
        ver = hor
    return ver

def getContours(img, imgContour):
    contours, hierarchy = cv2.findContours(imgCanny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

    for cnt in contours:
        area = cv2.contourArea(cnt)
        areaMin = cv2.getTrackbarPos("Area", "Parameters")

        if area > areaMin:
            cv2.drawContours(imgContour, cnt, -1, (255, 0, 255), 3)
            peri = cv2.arcLength(cnt, True)
            #approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
            #print(len(approx))
            approx = cv2.approxPolyDP(cnt, cv2.arcLength(cnt, True) * 0.02, True)

            x, y, w, h = cv2.boundingRect(approx)

            cv2.rectangle(imgContour, (x, y), (x + w, y + h), (0, 255, 0), 5)

            cv2.putText(imgContour, "Points: " + str(len(approx)), (x + w + 20, y + 20), cv2.FONT_HERSHEY_COMPLEX, .7,
                        (0, 255, 0), 2)
            cv2.putText(imgContour, "Area: " + str(int(area)), (x + w + 20, y + 45), cv2.FONT_HERSHEY_COMPLEX, 0.7,
                        (0, 255, 0), 2)
            approx = cv2.approxPolyDP(cnt, cv2.arcLength(cnt, True) * 0.02, True)

            # Get the number of points in the contour
            num_points = len(approx)
            print("Number of Points:", num_points)

            if num_points == 6:
                # Get the bounding rectangle of the contour
                x, y, w, h = cv2.boundingRect(approx)

                # Get the coordinates of the bottom center point
                cx = x + w // 2
                cy = y + h
                bottom_center = (cx, cy)

                # Draw a 12 cm straight line down the Y arrow axis from the bottom center point
                line_length_px = int(2.1 / 0.026458)  # Convert 12 cm to pixels (assuming 1 cm = 0.026458 px)
                end_point = (cx, cy - line_length_px)
                cv2.line(imgContour, bottom_center, (cx, cy - line_length_px), (0, 0, 255), 2)
                
                # Draw a purple point at the end of the line
                cv2.circle(imgContour, end_point, 7, (255, 0, 255), -1)

            elif num_points == 8:
                # Find the bounding box of the contour
                x, y, w, h = cv2.boundingRect(approx)

                # Find the 1/4 point of the bottom line
                quarter_point = (x + int(w / 4), y + h)

                # Draw a 5 cm line to the X axis
                line_length_px = int(2 / 0.026458)  # Convert 5 cm to pixels (assuming 1 cm = 0.026458 px)
                end_point = (quarter_point[0], quarter_point[1] - line_length_px)

                cv2.line(imgContour, quarter_point, (quarter_point[0], quarter_point[1] - line_length_px), (0, 0, 255),
                         2)
                cv2.circle(imgContour, end_point, 7, (255, 0, 255), -1)

            # If the number of points is neither 6 nor 9, keep the X and Y arrows from the middle of the object
            else:
                M = cv2.moments(cnt)  # Use 'approx' instead of 'cnt' for moments calculation
                cx = int(M['m10'] / M['m00'])
                cy = int(M['m01'] / M['m00'])
                x, y, w, h = cv2.boundingRect(cnt)  # Move this line here
                cv2.rectangle(imgContour, (x, y), (x + w, y + h), (0, 255, 0), 5)
                center_x = x + w // 2
                center_y = y + h // 2
                cv2.line(imgContour, (center_x, y), (center_x, y + h), (0, 0, 255), 2)
                cv2.line(imgContour, (x, center_y), (x + w, center_y), (0, 0, 255), 2)
                cv2.circle(imgContour, (cx, cy), 7, (255, 0, 0), -1)

        max_area = 0
        max_contour = None

        for contour in contours:
            area = cv2.contourArea(contour)
            if area > max_area:
                max_area = area
                max_contour = contour


        if max_contour is not None:
            perimeter = cv2.arcLength(max_contour, True)
            approx = cv2.approxPolyDP(max_contour, 0.02 * perimeter, True)

            x, y, w, h = cv2.boundingRect(approx)
            cv2.rectangle(imgContour, (x, y), (x + w, y + h), (0, 255, 0), 2)

            width = w
            length = x + w - x  # length of the x coordinate extending from left to right

            if 430 <= length <= 460:
                green_pin.write(1)

            elif 200 <= length <= 300:
                yellow_pin.write(1)

            else:
                green_pin.write(0)
                yellow_pin.write(0)

            print("Width: ", width)

        return imgContour

while True:
    success, img = cap.read()
    imgContour = img.copy()
    imgBlur = cv2.GaussianBlur(img, (7, 7), 1)
    imgGray = cv2.cvtColor(imgBlur, cv2.COLOR_BGR2GRAY)
    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    imgCanny = cv2.Canny(imgGray, threshold1, threshold2)
    kernel = np.ones((5, 5))
    imgDil = cv2.dilate(imgCanny, kernel, iterations=1)
    getContours(imgDil, imgContour)
    cx = 100
    cy = 200
    imgStack = stackImages(0.8, ([img, imgCanny], [imgDil, imgContour]), cx, cy)
    cv2.imshow("Result", imgStack)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break